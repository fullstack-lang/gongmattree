// generated by stacks/gong/go/models/controller_file.go
package controllers

import (
	"log"
	"net/http"
	"time"

	"gongmattree/go/models"
	"gongmattree/go/orm"

	"github.com/gin-gonic/gin"
)

// declaration in order to justify use of the models import
var __Button__dummysDeclaration__ models.Button
var __Button_time__dummyDeclaration time.Duration

// An ButtonID parameter model.
//
// This is used for operations that want the ID of an order in the path
// swagger:parameters getButton updateButton deleteButton
type ButtonID struct {
	// The ID of the order
	//
	// in: path
	// required: true
	ID int64
}

// ButtonInput is a schema that can validate the userâ€™s
// input to prevent us from getting invalid data
// swagger:parameters postButton updateButton
type ButtonInput struct {
	// The Button to submit or modify
	// in: body
	Button *orm.ButtonAPI
}

// GetButtons
//
// swagger:route GET /buttons buttons getButtons
//
// Get all buttons
//
// Responses:
//    default: genericError
//        200: buttonDBsResponse
func GetButtons(c *gin.Context) {
	db := orm.BackRepo.BackRepoButton.GetDB()

	// source slice
	var buttonDBs []orm.ButtonDB
	query := db.Find(&buttonDBs)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// slice that will be transmitted to the front
	buttonAPIs := make([]orm.ButtonAPI, 0)

	// for each button, update fields from the database nullable fields
	for idx := range buttonDBs {
		buttonDB := &buttonDBs[idx]
		_ = buttonDB
		var buttonAPI orm.ButtonAPI

		// insertion point for updating fields
		buttonAPI.ID = buttonDB.ID
		buttonDB.CopyBasicFieldsToButton(&buttonAPI.Button)
		buttonAPI.ButtonPointersEnconding = buttonDB.ButtonPointersEnconding
		buttonAPIs = append(buttonAPIs, buttonAPI)
	}

	c.JSON(http.StatusOK, buttonAPIs)
}

// PostButton
//
// swagger:route POST /buttons buttons postButton
//
// Creates a button
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Responses:
//       200: buttonDBResponse
func PostButton(c *gin.Context) {
	db := orm.BackRepo.BackRepoButton.GetDB()

	// Validate input
	var input orm.ButtonAPI

	err := c.ShouldBindJSON(&input)
	if err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Create button
	buttonDB := orm.ButtonDB{}
	buttonDB.ButtonPointersEnconding = input.ButtonPointersEnconding
	buttonDB.CopyBasicFieldsFromButton(&input.Button)

	query := db.Create(&buttonDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// a POST is equivalent to a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, buttonDB)
}

// GetButton
//
// swagger:route GET /buttons/{ID} buttons getButton
//
// Gets the details for a button.
//
// Responses:
//    default: genericError
//        200: buttonDBResponse
func GetButton(c *gin.Context) {
	db := orm.BackRepo.BackRepoButton.GetDB()

	// Get buttonDB in DB
	var buttonDB orm.ButtonDB
	if err := db.First(&buttonDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	var buttonAPI orm.ButtonAPI
	buttonAPI.ID = buttonDB.ID
	buttonAPI.ButtonPointersEnconding = buttonDB.ButtonPointersEnconding
	buttonDB.CopyBasicFieldsToButton(&buttonAPI.Button)

	c.JSON(http.StatusOK, buttonAPI)
}

// UpdateButton
//
// swagger:route PATCH /buttons/{ID} buttons updateButton
//
// Update a button
//
// Responses:
//    default: genericError
//        200: buttonDBResponse
func UpdateButton(c *gin.Context) {
	db := orm.BackRepo.BackRepoButton.GetDB()

	// Get model if exist
	var buttonDB orm.ButtonDB

	// fetch the button
	query := db.First(&buttonDB, c.Param("id"))

	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// Validate input
	var input orm.ButtonAPI
	if err := c.ShouldBindJSON(&input); err != nil {
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// update
	buttonDB.CopyBasicFieldsFromButton(&input.Button)
	buttonDB.ButtonPointersEnconding = input.ButtonPointersEnconding

	query = db.Model(&buttonDB).Updates(buttonDB)
	if query.Error != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = query.Error.Error()
		log.Println(query.Error.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// an UPDATE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	// return status OK with the marshalling of the the buttonDB
	c.JSON(http.StatusOK, buttonDB)
}

// DeleteButton
//
// swagger:route DELETE /buttons/{ID} buttons deleteButton
//
// Delete a button
//
// Responses:
//    default: genericError
func DeleteButton(c *gin.Context) {
	db := orm.BackRepo.BackRepoButton.GetDB()

	// Get model if exist
	var buttonDB orm.ButtonDB
	if err := db.First(&buttonDB, c.Param("id")).Error; err != nil {
		var returnError GenericError
		returnError.Body.Code = http.StatusBadRequest
		returnError.Body.Message = err.Error()
		log.Println(err.Error())
		c.JSON(http.StatusBadRequest, returnError.Body)
		return
	}

	// with gorm.Model field, default delete is a soft delete. Unscoped() force delete
	db.Unscoped().Delete(&buttonDB)

	// a DELETE generates a back repo commit increase
	// (this will be improved with implementation of unit of work design pattern)
	orm.BackRepo.IncrementPushFromFrontNb()

	c.JSON(http.StatusOK, gin.H{"data": true})
}
